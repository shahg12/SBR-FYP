<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>videoChatApp</title>
    <link rel="stylesheet" href="style.css" />
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://kit.fontawesome.com/c939d0e917.js"></script>
    <script src="https://unpkg.com/peerjs@1.3.1/dist/peerjs.min.js"></script>
    <script>
      const ROOM_ID = "<%= roomId %>";
    </script>
  </head>
  <style>@import url("https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap");

    :root {
      --main-darklg: #1d2635;
      --main-dark: #161d29;
      --primary-color: #2f80ec;
      --main-light: #eeeeee;
      font-family: "Poppins", sans-serif;
    }
    
    * {
      margin: 0;
      padding: 0;
    }
    
    .header {
      display: flex;
      justify-content: center;
      align-items: center;
      height: 8vh;
      position: relative;
      width: 100%;
      background-color: var(--main-darklg);
    }
    
    .logo > h3 {
      color: var(--main-light);
    }
    
    .main {
      overflow: hidden;
      height: 92vh;
      display: flex;
    }
    
    .main__left {
      flex: 0.7;
      display: flex;
      flex-direction: column;
    }
    
    .videos__group {
      flex-grow: 1;
      display: flex;
      justify-content: center;
      align-items: center;
      padding: 1rem;
      background-color: var(--main-dark);
    }
    
    video {
      height: 300px;
      border-radius: 1rem;
      margin: 0.5rem;
      width: 400px;
      object-fit: cover;
      transform: rotateY(180deg);
      -webkit-transform: rotateY(180deg);
      -moz-transform: rotateY(180deg);
    }
    
    .options {
      padding: 1rem;
      display: flex;
      background-color: var(--main-darklg);
    }
    
    .options__left {
      display: flex;
    }
    
    .options__right {
      margin-left: auto;
    }
    
    .options__button {
      display: flex;
      justify-content: center;
      align-items: center;
      background-color: var(--primary-color);
      height: 50px;
      border-radius: 5px;
      color: var(--main-light);
      font-size: 1.2rem;
      width: 50px;
      margin: 0 0.5rem;
    }
    
    .background__red {
      background-color: #f6484a;
    }
    
    .main__right {
      display: flex;
      flex-direction: column;
      flex: 0.3;
      background-color: #242f41;
    }
    
    .main__chat_window {
      flex-grow: 1;
      overflow-y: scroll;
    }
    
    .main__chat_window::-webkit-scrollbar {
      display: none;
    }
    
    .main__message_container {
      padding: 1rem;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    .main__message_container > input {
      height: 50px;
      flex: 1;
      font-size: 1rem;
      border-radius: 5px;
      padding-left: 20px;
      border: none;
    }
    
    .messages {
      display: flex;
      flex-direction: column;
      margin: 1.5rem;
    }
    
    .message {
      display: flex;
      flex-direction: column;
    }
    
    .message > b {
      color: #eeeeee;
      display: flex;
      align-items: center;
      text-transform: capitalize;
    }
    
    .message > b > i {
      margin-right: 0.7rem;
      font-size: 1.5rem;
    }
    
    .message > span {
      background-color: #eeeeee;
      margin: 1rem 0;
      padding: 1rem;
      border-radius: 5px;
    }
    
    #video-grid {
      display: flex;
      justify-content: center;
      flex-wrap: wrap;
    }
    
    #showChat {
      display: none;
    }
    
    .header__back {
      display: none;
      position: absolute;
      font-size: 1.3rem;
      top: 17px;
      left: 28px;
      color: #fff;
    }
    
    @media (max-width: 700px) {
      .main__right {
        display: none;
      }
      .main__left {
        width: 100%;
        flex: 1;
      }
    
      video {
        height: auto;
        width: 100%;
      }
    
      #showChat {
        display: flex;
      }
    }
    </style>
 
    <body>
      <div class="header">
        <div class="logo">
          <div class="header__back">
            <i class="fas fa-angle-left"></i>
          </div>
          <h3>Video Chat</h2>
        </div>
      </div>  
      <div class="main">  
      <div class="main__left">
        <div class="videos__group">
          <div id="video-grid">
  
          </div>
        </div>
        <div class="options">
          <div class="options__left">
            <div id="stopVideo" class="options__button">
              <i class="fa fa-video-camera"></i>
            </div>
            <div id="muteButton" class="options__button">
              <i class="fa fa-microphone"></i>
            </div>
            <div id="showChat" class="options__button">
              <i class="fa fa-comment"></i>
            </div>
          </div>
          <div class="options__right">
            <div id="inviteButton" class="options__button">
              <i class="fas fa-user-plus"></i>
            </div>
          </div>
        </div>
      </div>
      <div class="main__right">
        <div class="main__chat_window">
            <div class="messages">
  
            </div>
        </div>
        <div class="main__message_container">
          <input id="chat_message" type="text" autocomplete="off" placeholder="Type message here...">
          <div id="send" class="options__button">
            <i class="fa fa-plus" aria-hidden="true"></i>
          </div>
        </div>
      </div>
    </div>
  
  <script>

              const socket = io("/video");
              const videoGrid = document.getElementById("video-grid");
              const myVideo = document.createElement("video");
              const showChat = document.querySelector("#showChat");
              const backBtn = document.querySelector(".header__back");
              myVideo.muted = true;
              
              backBtn.addEventListener("click", () => {
                document.querySelector(".main__left").style.display = "flex";
                document.querySelector(".main__left").style.flex = "1";
                document.querySelector(".main__right").style.display = "none";
                document.querySelector(".header__back").style.display = "none";
              });
              
              showChat.addEventListener("click", () => {
                document.querySelector(".main__right").style.display = "flex";
                document.querySelector(".main__right").style.flex = "1";
                document.querySelector(".main__left").style.display = "none";
                document.querySelector(".header__back").style.display = "block";
              });
              
              const user = prompt("Enter your name");
              console.log("user",user)
              
              var peer = new Peer(undefined, {
                path: "/peerjs",
                host: "/",
                port: "3031",
              });
              console.log("peer",peer)
              let myVideoStream;
              navigator.mediaDevices
                .getUserMedia({
                  audio: true,
                  video: true,
                })
                .then((stream) => {
                  myVideoStream = stream;
                  addVideoStream(myVideo, stream);
              
                  peer.on("call", (call) => {
                    call.answer(stream);
                    const video = document.createElement("video");
                    call.on("stream", (userVideoStream) => {
                      console.log("Peer Stream is running",userVideoStream)
                      addVideoStream(video, userVideoStream);
                    });
                  });
              
                  socket.on("user-connected", (userId) => {
                    console.log(userId)
                    connectToNewUser(userId, stream);
                  });
                });
              
              const connectToNewUser = (userId, stream) => {
                const call = peer.call(userId, stream);
                const video = document.createElement("video");
                call.on("stream", (userVideoStream) => {
                  addVideoStream(video, userVideoStream);
                });
              };
              
              peer.on("open", (id) => {
                socket.emit("join-room", ROOM_ID, id, user);
              });
              
              const addVideoStream = (video, stream) => {
                video.srcObject = stream;
                video.addEventListener("loadedmetadata", () => {
                  video.play();
                  videoGrid.append(video);
                });
              };
              
              let text = document.querySelector("#chat_message");
              let send = document.getElementById("send");
              let messages = document.querySelector(".messages");
              
              send.addEventListener("click", (e) => {
               
                socket.emit("user-connected", "1223345" ) 

                        
                if (text.value.length !== 0) {
                  socket.emit("message", text.value);
                  text.value = "";
                }
              });
              
              text.addEventListener("keydown", (e) => {
                // console.log("shdjhgf")
                if (e.key === "Enter" && text.value.length !== 0) {
                  socket.emit("message", text.value);
                  text.value = "";
                }
              });
              
              const inviteButton = document.querySelector("#inviteButton");
              const muteButton = document.querySelector("#muteButton");
              const stopVideo = document.querySelector("#stopVideo");
              muteButton.addEventListener("click", () => {
                const enabled = myVideoStream.getAudioTracks()[0].enabled;
                if (enabled) {
                  myVideoStream.getAudioTracks()[0].enabled = false;
                  html = `<i class="fas fa-microphone-slash"></i>`;
                  muteButton.classList.toggle("background__red");
                  muteButton.innerHTML = html;
                } else {
                  myVideoStream.getAudioTracks()[0].enabled = true;
                  html = `<i class="fas fa-microphone"></i>`;
                  muteButton.classList.toggle("background__red");
                  muteButton.innerHTML = html;
                }
              });
              
              stopVideo.addEventListener("click", () => {
                const enabled = myVideoStream.getVideoTracks()[0].enabled;
                if (enabled) {
                  myVideoStream.getVideoTracks()[0].enabled = false;
                  html = `<i class="fas fa-video-slash"></i>`;
                  stopVideo.classList.toggle("background__red");
                  stopVideo.innerHTML = html;
                } else {
                  myVideoStream.getVideoTracks()[0].enabled = true;
                  html = `<i class="fas fa-video"></i>`;
                  stopVideo.classList.toggle("background__red");
                  stopVideo.innerHTML = html;
                }
              });
              
              inviteButton.addEventListener("click", (e) => {
                prompt(
                  "Copy this link and send it to people you want to meet with",
                  window.location.href
                );
              });
              
              socket.on("createMessage", (message, userName) => {
                messages.innerHTML =
                  messages.innerHTML +
                  `<div class="message">
                      <b><i class="far fa-user-circle"></i> <span> ${
                        userName === user ? "me" : userName
                      }</span> </b>
                      <span>${message}</span>
                  </div>`;
              });
              </script> 
        
  </body>

</html>
